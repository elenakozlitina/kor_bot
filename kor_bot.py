from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import gspread
from google.oauth2.service_account import Credentials
import random
import asyncio
import logging
import json 
import os
import asyncpg
from dotenv import load_dotenv
from tenacity import retry, stop_after_attempt, wait_exponential


load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

class Database:
    def __init__(self):
        self.pool = None

    async def connect(self):
        self.pool = await asyncpg.create_pool(os.getenv("DB_URL"))

    async def get_user(self, user_id: int):
        return await self.pool.fetchrow("SELECT * FROM users WHERE user_id = $1", user_id)

    async def create_user(self, user_id: int):
        await self.pool.execute("""
            INSERT INTO users (user_id) VALUES ($1) 
            ON CONFLICT (user_id) DO NOTHING
        """, user_id)

    async def update_progress(self, user_id: int, score: int, current_letter_index: int):
        await self.pool.execute("""
            UPDATE users 
            SET score = score + $1, current_letter_index = $2 
            WHERE user_id = $3
        """, score, current_letter_index, user_id)

    async def add_learned_word(self, user_id: int, word: str, translation: str, level: int, image_url: str = None):
        await self.pool.execute("""
            INSERT INTO learned_words (user_id, word, translation, level, image_url)
            VALUES ($1, $2, $3, $4, $5)
            ON CONFLICT (user_id, word) DO NOTHING
        """, user_id, word, translation, level, image_url)

    async def get_learned_words(self, user_id: int, level: int = None):
        query = "SELECT * FROM learned_words WHERE user_id = $1"
        params = [user_id]
        if level is not None:
            query += " AND level = $2"
            params.append(level)
        return await self.pool.fetch(query, *params)

    async def delete_subscriber(self, user_id: int):
        await self.pool.execute("DELETE FROM subscriptions WHERE user_id = $1", user_id)

    async def add_subscriber(self, user_id: int):
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É users (–µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç)
            await self.pool.execute("""
                INSERT INTO users (user_id) 
                VALUES ($1) 
                ON CONFLICT (user_id) DO NOTHING
            """, user_id)

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É subscriptions
            await self.pool.execute("""
                INSERT INTO subscriptions (user_id) 
                VALUES ($1) 
                ON CONFLICT (user_id) DO NOTHING
            """, user_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞: {e}")

    async def get_subscribers(self):
        return await self.pool.fetch("SELECT user_id FROM subscriptions")
    async def close(self):
        if self.pool:
            await self.pool.close()
db = Database()



async def handle_channel_post(update: Update, context: CallbackContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º username –∫–∞–Ω–∞–ª–∞ (–±–µ–∑ @)
        if update.channel_post.chat.username.lower() != "topik2prep":
            return
            
        subscribers = await db.get_subscribers()  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
        
        for user_id in subscribers:
            try:
                await context.bot.forward_message(
                    chat_id=user_id['user_id'],  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: user_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    from_chat_id=update.channel_post.chat.id,
                    message_id=update.channel_post.message_id
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –¥–ª—è {user_id}: {e}")
                await db.delete_subscriber(user_id['user_id'])  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
        
    except Exception as e:
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        
# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets
scope = ["https://spreadsheets.google.com/feeds", 'https://www.googleapis.com/auth/spreadsheets',
         "https://www.googleapis.com/auth/drive.file", "https://www.googleapis.com/auth/drive"]

# –ò—Å–ø–æ–ª—å–∑—É–µ–º service_account.json –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
creds = Credentials.from_service_account_file('credentials.json', scopes=scope)
client = gspread.authorize(creds)
spreadsheet = client.open("–ö–æ—Ä–µ–π—Å–∫–∏–π –ê–ª—Ñ–∞–≤–∏—Ç")
sheet = spreadsheet.get_worksheet(0)  # –ü–µ—Ä–≤—ã–π –ª–∏—Å—Ç —Ç–∞–±–ª–∏—Ü—ã

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_progress = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
grammar_data = []
phrases_data = []


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞
SOURCE_CHANNEL_ID = "@topik2prep"  # –ö–∞–Ω–∞–ª-–∏—Å—Ç–æ—á–Ω–∏–∫

async def unsubscribe(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    await db.delete_subscriber(user_id)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
    await update.message.reply_text("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ üò¢")


async def send_daily_post(context: CallbackContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞
        channel_id = "@topik2prep"
        posts = await context.bot.get_chat(chat_id=channel_id, limit=1)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        subscribers = await db.get_subscribers()  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
        
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –ø–æ—Å—Ç –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        for user_id in subscribers:
            await context.bot.forward_message(
                chat_id=user_id['user_id'],  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: user_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                from_chat_id=channel_id,
                message_id=posts[0].message_id
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
subscribers = set()

async def return_to_menu(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    # –£–±–∏—Ä–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ current_word_index
    if user_id in user_progress:
        if "current_word" in user_progress[user_id]:
            del user_progress[user_id]["current_word"]

    menu_text = "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ: üëá"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        ["–•–∞–Ω–≥—ã–ª—å", "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¢–û–ü–ò–ö—É"],
        ["–ú–æ–π —Å–ª–æ–≤–∞—Ä—å", "–£—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    await update.message.reply_text(menu_text, reply_markup=reply_markup, parse_mode="HTML")
    if "mode" in context.user_data:
        del context.user_data["mode"]


async def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    await db.add_subscriber(user_id)
    
    
    welcome_text0 = """ <b>–ü—Ä–∏–≤–µ—Ç! üëã </b> """
    welcome_text00 = """
<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ProMol ‚Äî —Ç–≤–æ–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∫–æ—Ä–µ–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞!</b>  üá∞üá∑üéâ
–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–µ —Ç–æ–ª—å–∫–æ —É—á–∏—Ç—å –∫–æ—Ä–µ–π—Å–∫–∏–π, –Ω–æ –∏ –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –∫—É–ª—å—Ç—É—Ä—É, —è–∑—ã–∫ –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏ –ö–æ—Ä–µ–∏. 
–í–æ—Ç —á—Ç–æ —Ç–µ–±—è –∂–¥–µ—Ç:
    """
    welcome_text1 = """
üåü <b>–•–∞–Ω–≥—ã–ª—å</b>   üÖ∞Ô∏è
–ò–∑—É—á–∞–π –∫–æ—Ä–µ–π—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç —Å –Ω—É–ª—è! –ú—ã –ø–æ–º–æ–∂–µ–º —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –∫–∞–∂–¥–æ–π –±—É–∫–≤–µ, –Ω–∞—É—á–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç—å –∑–≤—É–∫–∏ –∏ –ø–æ–∫–∞–∂–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–ª–æ–≤.

üåü <b>–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã</b>   üí¨
–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–ª–µ–∑–Ω—É—é —Ñ—Ä–∞–∑—É, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –±—ã—Å—Ç—Ä–µ–µ –∑–∞–≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞ –∫–æ—Ä–µ–π—Å–∫–æ–º!

üåü <b>–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞</b>  üìö
–†–∞–∑–±–∏—Ä–∞–π—Å—è –≤ —Å–ª–æ–∂–Ω—ã—Ö –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏ –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏. –ú—ã —Å–¥–µ–ª–∞–µ–º –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –ø–æ–Ω—è—Ç–Ω–æ–π –∏ –¥–æ—Å—Ç—É–ø–Ω–æ–π.

üåü <b>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ TOPIK</b>   üéì
–ì–æ—Ç–æ–≤—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω—É TOPIK —Å –Ω–∞–º–∏! –ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º —Ç–µ–±–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ç–µ—Å—Ç—ã –∏ —Å–æ–≤–µ—Ç—ã –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π —Å–¥–∞—á–∏.

üåü <b>–£—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞</b>  üå±
–ü–æ–ø–æ–ª–Ω—è–π —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∏—Ö –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.

üåü <b>–ú–æ–π —Å–ª–æ–≤–∞—Ä—å</b>  üìñ
–í—Å–µ –≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ç–≤–æ–µ–º –ª–∏—á–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ. –¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Ö, –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å.

üåü <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>  ‚è∞
–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—É—é —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—É—é —Ñ—Ä–∞–∑—É, –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏–ª–∏ –ø–æ–ª–µ–∑–Ω–æ–µ —Å–ª–æ–≤–æ. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É—á–∏—Ç—å –∫–æ—Ä–µ–π—Å–∫–∏–π —Ä–µ–≥—É–ª—è—Ä–Ω–æ –∏ –±–µ–∑ —É—Å–∏–ª–∏–π!
    """
    welcome_text2 = """ 
<b>–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?üëá
–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏ –º—ã –Ω–∞—á–Ω–µ–º —Ç–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –º–∏—Ä –∫–æ—Ä–µ–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞!</b> """
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        ["–•–∞–Ω–≥—ã–ª—å","–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¢–û–ü–ò–ö—É"],
        ["–ú–æ–π —Å–ª–æ–≤–∞—Ä—å", "–£—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(welcome_text0, reply_markup=reply_markup, parse_mode="HTML")
    await asyncio.sleep(0.5)
    await update.message.reply_text(welcome_text00, reply_markup=reply_markup, parse_mode="HTML")
    await asyncio.sleep(1)
    await update.message.reply_text(welcome_text1, reply_markup=reply_markup, parse_mode="HTML")
    await asyncio.sleep(2)
    await update.message.reply_text(welcome_text2, reply_markup=reply_markup, parse_mode="HTML")


async def handle_spelling_input(update: Update, context: CallbackContext):
    user_input = update.message.text.strip()
    check_data = context.user_data.get("spelling_check")
    
    if not check_data:
        # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
        context.user_data.pop("awaiting_spelling", None)
        context.user_data.pop("spelling_check", None)
        context.user_data["mode"] = "learn"
        await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ!")
        return

    if user_input.lower() == "–≤—ã–π—Ç–∏":
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
        context.user_data.pop("awaiting_spelling", None)
        context.user_data.pop("spelling_check", None)
        context.user_data["mode"] = None
        await return_to_menu(update, context)
        return

    if user_input == check_data['word']:
        await update.message.reply_text("‚úÖ –í–µ—Ä–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü!")
    else:
        await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {check_data['word']}")

    # –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –∏–∑—É—á–µ–Ω–∏—è
    context.user_data.pop("awaiting_spelling", None)
    context.user_data.pop("spelling_check", None)
    context.user_data["mode"] = "learn"

    await send_word(update, context)


async def handle_message(update: Update, context: CallbackContext):
    user_input = update.message.text.strip()
    user_id = update.message.from_user.id

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
    if context.user_data.get("mode") == "spelling_check":
        await handle_spelling_input(update, context)
        return

    async def clear_user_state(context):
        """–û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        keys_to_delete = [
            "current_words", "current_word_index", "correct_translation",
            "current_options", "awaiting_retry", "awaiting_letter_input",
            "awaiting_dictionary_level", "awaiting_input"
        ]
        for key in keys_to_delete:
            if key in context.user_data:
                del context.user_data[key]

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É "–≤—ã–π—Ç–∏" –Ω–∞ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
        if user_input.lower() == "–≤—ã–π—Ç–∏":
            await return_to_menu(update, context)
            await clear_user_state(context)  # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–≤–æ–¥–∞
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º—ã
        processed = False
        if context.user_data.get("mode") == "learn":
            processed = await check_word_translation(update, context)
        elif context.user_data.get("mode") == "game":
            processed = await check_game_translation(update, context)
        elif context.user_data.get("mode") == "spelling_check":
            if await handle_spelling_input(update, context):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–ª–æ–≤
                return

        if processed:
            return  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –≤—ã—Ö–æ–¥–∏–º

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        user = await db.get_user(user_id)
        if not user:
            await db.create_user(user_id)
            user = await db.get_user(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –±—É–∫–≤—ã/—Å–ª–æ–≤–∞
        if "awaiting_input" in context.user_data:  
            await check_user_response(update, context)
            return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if user_input in ["–•–∞–Ω–≥—ã–ª—å", "–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã", "–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞", "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¢–û–ü–ò–ö—É"]:
            await clear_user_state(context)
            await handle_choice(update, context)

        elif user_input == "–ú–æ–π —Å–ª–æ–≤–∞—Ä—å":
            await clear_user_state(context)
            await handle_my_dictionary(update, context)

        elif user_input == "–£—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞":
            await clear_user_state(context)
            await handle_learn_new_words(update, context)

        elif user_input == "–ß—Ç–æ –∑–∞ –±—É–∫–≤–∞?":
            await clear_user_state(context)
            await handle_what_is_letter(update, context)

        elif user_input == "–ò–∑—É—á–∞—Ç—å –±—É–∫–≤—ã":
            # –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            if user_id not in user_progress:
                user_progress[user_id] = {
                    "current_letter_index": 0,
                    "learned_words": [],
                    "score": 0
                }
            elif "current_letter_index" not in user_progress[user_id]:
                user_progress[user_id]["current_letter_index"] = 0

            await send_letters_and_words(update, context, user_id)
        elif user_input == "–ò–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑ üîÑ":
            await send_next_game_word(update, context)  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
            return

        elif "awaiting_letter_input" in context.user_data and context.user_data["awaiting_letter_input"]:
            await handle_letter_input(update, context)

        elif user_input.lower() == "–∏–≥—Ä–∞—Ç—å":
            await handle_learn_from_dictionary(update, context)
        elif user_input.lower() == "–æ—á–∏—Å—Ç–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å":
            await handle_clear_dictionary(update, context)
        elif "awaiting_spelling" in context.user_data:
            await handle_spelling_input(update, context)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ

        elif user_input.isdigit() and 1 <= int(user_input) <= 6:
            if "current_words" in context.user_data:
                await check_word_translation(update, context)
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–π —Å–ª–æ–≤–∞—Ä—å", –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è
                if "awaiting_dictionary_level" in context.user_data:
                    await handle_my_dictionary_level(update, context)
                    if "awaiting_dictionary_level" in context.user_data:
                        del context.user_data["awaiting_dictionary_level"]  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                else:
                    await handle_learn_new_words_level(update, context)

        elif "awaiting_retry" in context.user_data and context.user_data["awaiting_retry"]:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
            await check_word_translation(update, context)

        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —á—Ç–æ-—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ '–í—ã–π—Ç–∏'.")

    except Exception as e:
        print(f"Unexpected error: {e}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")



async def handle_letter_input(update: Update, context: CallbackContext): # –ß—Ç–æ –∑–∞ –±—É–∫–≤–∞ –ª–æ–≥–∏–∫–∞ 
    user_input = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–π—Ç–∏ –≤ –º–µ–Ω—é
    if user_input.lower() == "–≤—ã–π—Ç–∏":
        await return_to_menu(update, context)
        return

    letters_data = await get_letters_data()
    if not letters_data:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ò—â–µ–º –±—É–∫–≤—É –≤ –¥–∞–Ω–Ω—ã—Ö
    for letter_data in letters_data:
        if letter_data['–ë—É–∫–≤–∞'] == user_input:
            letter = letter_data['–ë—É–∫–≤–∞']
            example_word = letter_data['–ü—Ä–∏–º–µ—Ä'].strip()
            transliteration = letter_data['–¢—Ä–∞–Ω—Å–ª–∏—Ç']
            translation = letter_data['–ü–µ—Ä–µ–≤–æ–¥']
            sound = letter_data['–ó–≤—É–∫']
            features = letter_data['–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏']

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—É–∫–≤–µ
            await update.message.reply_text(
                f"<b>–ë—É–∫–≤–∞:</b> {letter} {sound}\n"
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {features}\n"
                f"<b>–ü—Ä–∏–º–µ—Ä —Å–ª–æ–≤–∞:</b> {example_word} ({transliteration}) ‚Äî {translation}",
                parse_mode="HTML"
            )
            return

    # –ï—Å–ª–∏ –±—É–∫–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    await update.message.reply_text("–ë—É–∫–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")


async def handle_what_is_letter(update: Update, context: CallbackContext): # –ß—Ç–æ –∑–∞ –±—É–∫–≤–∞ –ª–æ–≥–∏–∫–∞ 2
    user_input = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥ –≤ –º–µ–Ω—é
    if user_input.lower() == "–≤—ã–π—Ç–∏":
        await return_to_menu(update, context)
        return

    user_id = update.message.from_user.id

    # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_progress:
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–∫–≤
        if "current_word" in user_progress[user_id]:
            del user_progress[user_id]["current_word"]
        
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    keys_to_remove = [
        "current_words", 
        "current_word_index", 
        "correct_translation",
        "current_options", 
        "awaiting_retry"
    ]
    
    for key in keys_to_remove:
        if key in context.user_data:
            del context.user_data[key]

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –±—É–∫–≤—ã
    context.user_data["awaiting_letter_input"] = True

    await update.message.reply_text(
        "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–≤—ã, –∏ —è –ø–æ–∫–∞–∂—É –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π:"
    )



async def send_letters_and_words(update: Update, context: CallbackContext, user_id: int):
    letters_data = sheet.get_all_records()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user = await db.get_user(user_id)
    if not user:
        await db.create_user(user_id)
        user = await db.get_user(user_id)
    
    current_index = user['current_letter_index']
    
    if current_index >= len(letters_data):
        await update.message.reply_text("–í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ –±—É–∫–≤—ã! üéâ")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±—É–∫–≤
    if current_index < 10:  # –û–±—ã—á–Ω—ã–µ –≥–ª–∞—Å–Ω—ã–µ (2-11 —Å—Ç—Ä–æ–∫–∏)
        if current_index == 0:
            category_text0 = """<b>üìö –ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –•–∞–Ω–≥—ã–ª—è, –≤–∞–∂–Ω–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª:</b>"""
            category_text1 = """
    1. –ë—É–∫–≤—ã —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è —Å–ª–µ–≤–∞-–Ω–∞–ø—Ä–∞–≤–æ –∏ —Å–≤–µ—Ä—Ö—É-–≤–Ω–∏–∑. –ù–∞–ø—Ä–∏–º–µ—Ä, „Ñ¥ (–Ω) + „Öï (—ë/–π–æ) + „Ñ¥ (–Ω) = ÎÖÑ (–Ω–π–æ–Ω) ‚Äî –≥–æ–¥.
    2. –ù–µ –ø—É–≥–∞–π—Ç–µ—Å—å, –µ—Å–ª–∏ –≤–∏–¥–∏—Ç–µ –Ω–∞ –ø–∏—Å—å–º–µ, —á—Ç–æ –ø–µ—Ä–µ–¥ –≥–ª–∞—Å–Ω–æ–π —Å—Ç–æ–∏—Ç –∫—Ä—É–∂–æ—á–µ–∫. –≠—Ç–æ –Ω–æ—Ä–º–∞ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≥–ª–∞—Å–Ω—ã—Ö –≤ –Ω–∞—á–∞–ª–µ —Å–ª–æ–≤–∞. –ù–∏–∫–∞–∫ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ. –ù–∞–ø—Ä–∏–º–µ—Ä, –≤ —Å–ª–æ–≤–µ ÏïÑÎ≤ÑÎãò ‚Äî ¬´–æ—Ç–µ—Ü¬ª.
    3. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ–π –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–æ–ª–æ–∂–µ–Ω–∏—è –≤ —Å–ª–æ–≤–µ/—Å–ª–æ–≥–µ, ¬´—Å–æ—Å–µ–¥—Å—Ç–≤–∞¬ª —Å –¥—Ä—É–≥–∏–º–∏ –±—É–∫–≤–∞–º–∏.
            """
            category_text2 ="""<b>–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –ø–µ—Ä–≤—ã—Ö –±—É–∫–≤:</b>"""
            await update.message.reply_text(category_text0, parse_mode="HTML")
            await asyncio.sleep(1)
            await update.message.reply_text(category_text1, parse_mode="HTML")
            await asyncio.sleep(12)
            await update.message.reply_text(category_text2, parse_mode="HTML")
            await asyncio.sleep(1)

    elif current_index < 20:  # –û–±—ã—á–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω—ã–µ (12-20 —Å—Ç—Ä–æ–∫–∏)
        if current_index == 10:
            category_text = """
            <b>–û–±—ã—á–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω—ã–µ ‚Äî —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω—ã–µ –∑–≤—É–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Å–ª–æ–≤–∞—Ö.</b>
            """
            await update.message.reply_text(category_text, parse_mode="HTML")
            await asyncio.sleep(1)
    elif current_index < 25:  # –ü—Ä–∏–¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ –≥–ª–∞—Å–Ω—ã–µ (21-25 —Å—Ç—Ä–æ–∫–∏)
        if current_index == 20:
            category_text = """
            <b>–ü—Ä–∏–¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ –≥–ª–∞—Å–Ω—ã–µ –ø—Ä–æ–∏–∑–Ω–æ—Å—è—Ç—Å—è –º—è–≥—á–µ –æ–±—ã—á–Ω—ã—Ö, –Ω–æ –≤ —Ü–µ–ª–æ–º –æ–Ω–∏ –æ–±—Ä–∞–∑—É—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–≤—É–∫–∏.</b>
            """
            await update.message.reply_text(category_text, parse_mode="HTML")
            await asyncio.sleep(1)
    elif current_index < 35:  # –î–∏—Ñ—Ç–æ–Ω–≥–∏ (26-36 —Å—Ç—Ä–æ–∫–∏)
        if current_index == 25:
            category_text = """
            <b>–î–∏—Ñ—Ç–æ–Ω–≥–∏ ‚Äî —Å–ª–æ–∂–Ω—ã–µ –≥–ª–∞—Å–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –∏–∑ –¥–≤—É—Ö –±—É–∫–≤ –∏ –ø—Ä–æ–∏–∑–Ω–æ—Å—è—Ç—Å—è –∫–∞–∫ –æ–¥–∏–Ω –∑–≤—É–∫.</b>
            """
            await update.message.reply_text(category_text, parse_mode="HTML")
            await asyncio.sleep(1)
    elif current_index < 41:  # –°–¥–≤–æ–µ–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω—ã–µ (37-41 —Å—Ç—Ä–æ–∫–∏)
        if current_index == 35:
            category_text = """
            <b>–°–¥–≤–æ–µ–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω—ã–µ ‚Äî —ç—Ç–æ –±—É–∫–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∏–∑–Ω–æ—Å—è—Ç—Å—è –≤ –¥–≤–∞ —Ä–∞–∑–∞ —Å–∏–ª—å–Ω–µ–µ –æ–±—ã—á–Ω—ã—Ö.</b>
            """
            await update.message.reply_text(category_text, parse_mode="HTML")
            await asyncio.sleep(1)

       # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π –±—É–∫–≤—ã
    current_letter_data = letters_data[current_index]
    letter = current_letter_data['–ë—É–∫–≤–∞']
    example_word = current_letter_data['–ü—Ä–∏–º–µ—Ä'].strip()
    transliteration = current_letter_data['–¢—Ä–∞–Ω—Å–ª–∏—Ç']
    translation = current_letter_data['–ü–µ—Ä–µ–≤–æ–¥']
    features = current_letter_data['–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏']
    sound = current_letter_data['–ó–≤—É–∫']
    image_url = current_letter_data['–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'].strip()  # URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.user_data.update({
        "current_letter": letter,
        "current_word": example_word,
        "awaiting_input": "AWAITING_LETTER"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –±—É–∫–≤—ã
    })

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –±—É–∫–≤—ã
        if image_url:
            await update.message.reply_photo(
                photo=image_url,
                caption=f"<b>–ò–∑—É—á–∏ –±—É–∫–≤—É: {letter}</b> {sound}\n{features}",
                parse_mode="HTML"
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä —Å–ª–æ–≤–∞
            await update.message.reply_text(
                f"<b>–ü—Ä–∏–º–µ—Ä —Å–ª–æ–≤–∞:</b> {example_word} ({transliteration}) ‚Äî {translation}\n\n",
                parse_mode="HTML"
            )
        else:
            await update.message.reply_text(f"<b>–ò–∑—É—á–∏ –±—É–∫–≤—É: {letter}</b>{sound} \n{features}", parse_mode="HTML")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä —Å–ª–æ–≤–∞
            await update.message.reply_text(
                f"<b>–ü—Ä–∏–º–µ—Ä —Å–ª–æ–≤–∞:</b> {example_word} ({transliteration}) ‚Äî {translation}\n\n",
                parse_mode="HTML"
            )

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –±—É–∫–≤—ã
        await update.message.reply_text("‚û°Ô∏è –ù–∞–ø–∏—à–∏ —ç—Ç—É –±—É–∫–≤—É:", parse_mode="HTML")

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ë–î
        await db.update_progress(
            user_id=user_id,
            score=0,  # –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            current_letter_index=current_index + 1
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")




async def check_user_response(update: Update, context: CallbackContext):
    user_input = update.message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    user_id = update.message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–π—Ç–∏
    if user_input == "–≤—ã–π—Ç–∏":
        await return_to_menu(update, context)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∑–Ω–∞—Ç—å –æ –±—É–∫–≤–µ
    if user_input == "—á—Ç–æ –∑–∞ –±—É–∫–≤–∞?":
        await handle_what_is_letter(update, context)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±—É–∫–≤—ã –∏ —Å–ª–æ–≤–∞
    if user_id not in user_progress or "current_letter" not in context.user_data:
        await update.message.reply_text("–û—à–∏–±–∫–∞: —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    correct_letter = context.user_data["current_letter"]
    correct_word =context.user_data["current_word"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –±—É–∫–≤—É
    if "awaiting_input" in context.user_data and context.user_data["awaiting_input"] == "AWAITING_LETTER":
        if user_input == correct_letter:  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –±–µ–∑ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
            await update.message.reply_text("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ù–∞–ø–∏—à–∏ –ø—Ä–∏–º–µ—Ä —Å–ª–æ–≤–∞.")

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–ª—è –≤–≤–æ–¥–∞ —Å–ª–æ–≤–∞
            context.user_data["awaiting_input"] = "AWAITING_WORD"
            await update.message.reply_text(f"‚û°Ô∏è –ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ —Å –±—É–∫–≤–æ–π {correct_letter}: {correct_word}")
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑. –ù–∞–ø–∏—à–∏ –±—É–∫–≤—É:")

    # –ï—Å–ª–∏ –±—É–∫–≤–∞ –±—ã–ª–∞ –≤–≤–µ–¥–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–æ
    elif "awaiting_input" in context.user_data and context.user_data["awaiting_input"] == "AWAITING_WORD":
        if user_input == correct_word:  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –±–µ–∑ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
            await update.message.reply_text("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ")
            user = await db.get_user(user_id)
            if not user:
                await db.create_user(user_id)
                user = await db.get_user(user_id)

            await db.update_progress(
                user_id=user_id,
                score=0,  # –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                current_letter_index=user['current_letter_index'] + 1
            )
            await send_letters_and_words(update, context, user_id)
        else:
            await update.message.reply_text(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑: –ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ: {correct_word}")





# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def handle_my_dictionary(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id

    async with db.pool.acquire() as conn:
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
        levels = await conn.fetch(
            "SELECT DISTINCT wt.level FROM words_table wt JOIN users u ON wt.id::TEXT = ANY(u.learned_words) WHERE u.user_id = $1",
            user_id
        )

    if not levels:
        await update.message.reply_text("–í—ã –ø–æ–∫–∞ –Ω–µ –∏–∑—É—á–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞. üò¢")
        return

    keyboard = [[str(level['level'])] for level in sorted(levels, key=lambda x: x['level'])]
    keyboard.append(["–í—ã–π—Ç–∏"])
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–≤:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    context.user_data["awaiting_dictionary_level"] = True

async def handle_my_dictionary_level(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    level = int(update.message.text)

    async with db.pool.acquire() as conn:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ —É—Ä–æ–≤–Ω—è –∏–∑ –ë–î
        words = await conn.fetch(
            "SELECT * FROM words_table WHERE level = $1", 
            level
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è
        learned_words = await conn.fetch(
            """
            SELECT wt.* 
            FROM words_table wt
            JOIN users u ON wt.id::TEXT = ANY(u.learned_words) 
            WHERE u.user_id = $1 AND wt.level = $2
            """,
            user_id, level
        )

    if not learned_words:
        await update.message.reply_text(f"–ù–∞ —É—Ä–æ–≤–Ω–µ {level} –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.")
        return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_learned = len(learned_words)
    offset = max(0, total_learned - 20)
    last_20_words = learned_words[-20:]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    word_list = "\n".join(
        [f"{idx+1+offset}. {w['word']} ‚Äî {w['translation']}" 
         for idx, w in enumerate(last_20_words)]
    )
    
    stats_message = (
        f"üìö –£—Ä–æ–≤–µ–Ω—å {level}\n"
        f"üìä –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤: {total_learned}\n\n"
        f"üìñ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤:\n{word_list}"
    )

    await update.message.reply_text(
        stats_message,
        reply_markup=ReplyKeyboardMarkup(
            [["–ò–≥—Ä–∞—Ç—å", "–û—á–∏—Å—Ç–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å", "–í—ã–π—Ç–∏"]], 
            resize_keyboard=True
        )
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –∏–≥—Ä—ã
    context.user_data.update({
        "current_level": level,
        "current_words": learned_words
    })

async def handle_clear_dictionary(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    await clear_learned_words(user_id)
    
    await update.message.reply_text(
        "üóë –í–∞—à —Å–ª–æ–≤–∞—Ä—å —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!",
        reply_markup=ReplyKeyboardRemove()
    )
    await return_to_menu(update, context)



async def handle_learn_new_words(update: Update, context: CallbackContext):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—Ä–æ–≤–Ω—è–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π "–í—ã–π—Ç–∏"
    keyboard = [["1", "2", "3"], ["4", "5", "6"], ["–í—ã–π—Ç–∏"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–≤ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–í—ã–π—Ç–∏':", reply_markup=reply_markup)

async def handle_learn_new_words_level(update: Update, context: CallbackContext):
    user_input = update.message.text.strip()
    
    try:
        level = int(user_input)
        if level < 1 or level > 6:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ—Ç 1 –¥–æ 6.")
            return
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6.")
        return

    user_id = update.message.from_user.id

    try:
        async with db.pool.acquire() as conn:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ —É—Ä–æ–≤–Ω—è
            words = await conn.fetch(
                "SELECT * FROM words_table WHERE level = $1 ORDER BY st_imp DESC, random()",
                level
            )

            if not words:
                await update.message.reply_text(f"–ù–∞ —É—Ä–æ–≤–Ω–µ {level} –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤. üò¢")
                return

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = await conn.fetchrow(
                """SELECT learned_words, 
                COALESCE(learning_progress, '{}'::JSONB) as learning_progress 
                FROM users WHERE user_id = $1""",
                user_id
            )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            learning_progress = user_data['learning_progress'] if user_data else {}
            if isinstance(learning_progress, str):  # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                try:
                    learning_progress = json.loads(learning_progress)
                except:
                    learning_progress = {}

            level_progress = learning_progress.get(str(level), {'index': 0, 'words': []})
            
            learned_words = user_data['learned_words'] if user_data else []
            learned_set = set(learned_words)

            # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞
            filtered_words = [
                word for word in words 
                if str(word['id']) not in learned_set
            ]

            if not filtered_words:
                await update.message.reply_text(f"–í—ã —É–∂–µ –∏–∑—É—á–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ —É—Ä–æ–≤–Ω—è {level}! üéâ")
                return

            # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            start_index = level_progress.get('index', 0)
            if start_index >= len(filtered_words):
                start_index = 0

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.user_data.update({
                "current_words": filtered_words,
                "current_word_index": start_index,
                "current_level": level
            })

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
            await send_word(update, context)
            context.user_data["mode"] = "learn"

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.message.reply_text("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def send_word(update, context):
    user_id = update.message.from_user.id
    index = context.user_data.get("current_word_index", 0)
    words = context.user_data.get("current_words", [])
    level = context.user_data.get("current_level")

    if index >= len(words):
        await update.message.reply_text("–í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞! üéâ")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    async with db.pool.acquire() as conn:
        try:
            await conn.execute("""
                UPDATE users 
                SET learning_progress = 
                    COALESCE(learning_progress, '{}'::JSONB) || 
                    jsonb_build_object($1::TEXT, 
                        jsonb_build_object(
                            'index', $2::INTEGER,
                            'words', $3::JSONB
                        )
                    )
                WHERE user_id = $4
            """, 
            str(level),
            index,
            json.dumps([str(w['id']) for w in words[:index]]),
            user_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")

    
    word = words[index]
    correct_translation = word['translation']
    image_url = (word.get('image') or '').strip()
    
    try:
        if image_url:
            await update.message.reply_photo(photo=image_url, caption=f"<b>–ò–∑—É—á–∏–º —Å–ª–æ–≤–æ:</b> {word['word']}", parse_mode="HTML")
        else:
            await update.message.reply_text(f"<b>–ò–∑—É—á–∏–º —Å–ª–æ–≤–æ:</b> {word['word']}", parse_mode="HTML")
        
        all_translations = [w['translation'] for w in words if w['translation'] != correct_translation]
        random.shuffle(all_translations)
        options = [correct_translation] + all_translations[:2]
        random.shuffle(options)
        
        context.user_data.update({
            "correct_translation": correct_translation,
            "current_options": options
        })
        
        keyboard = [[str(i + 1) for i in range(len(options))], ["–í—ã–π—Ç–∏"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        options_text = "\n".join(f"{i+1}. {option}" for i, option in enumerate(options))
        await update.message.reply_text(
            f"<b>–°–ª–æ–≤–æ:</b> {word['word']}\n\n"
            f"<b>–í–∞—Ä–∏–∞–Ω—Ç—ã:</b>\n{options_text}\n\n"
            f"–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ (–≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä) –∏–ª–∏ –Ω–∞–∂–º–∏ '–í—ã–π—Ç–∏':\n\n"
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {index + 1} –∏–∑ {len(words)} —Å–ª–æ–≤ üöÄ",
            parse_mode="HTML",
            reply_markup=reply_markup
        )
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤–º–µ—Å—Ç–æ –ë–î
        context.user_data["current_word_index"] = index + 1

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ–≤–∞")



# –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
INTERACTIVE_CHECK_INTERVAL = 3  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 3 —Å–ª–æ–≤–∞

async def check_word_translation(update: Update, context: CallbackContext):
    if context.user_data.get("mode") != "learn":
        return False

    user_input = update.message.text.strip()
    user_id = update.message.from_user.id

    if user_input.lower() == "–≤—ã–π—Ç–∏":
        context.user_data["mode"] = None
        await return_to_menu(update, context)
        return True

    if "current_options" not in context.user_data or "correct_translation" not in context.user_data:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return True

    correct_translation = context.user_data["correct_translation"]
    options = context.user_data["current_options"]

    try:
        selected_option = int(user_input) - 1
        if selected_option < 0 or selected_option >= len(options):
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞.")
            return

        selected_translation = options[selected_option]

        async with db.pool.acquire() as conn:
            user = await conn.fetchrow("SELECT * FROM users WHERE user_id = $1", user_id)
            if not user:
                await conn.execute("INSERT INTO users(user_id) VALUES($1)", user_id)
                user = await conn.fetchrow("SELECT * FROM users WHERE user_id = $1", user_id)

            if selected_translation == correct_translation:
                current_word = context.user_data["current_words"][context.user_data["current_word_index"] - 1]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await conn.execute(
                    """
                    UPDATE users 
                    SET 
                        score = COALESCE(score, 0) + 10,
                        learned_words = array_append(learned_words, $1)
                    WHERE user_id = $2
                    """,
                    str(current_word['id']),  # –î–æ–±–∞–≤–ª—è–µ–º ID —Å–ª–æ–≤–∞ –≤ learned_words
                    user_id
                )

                await update.message.reply_text(
                    f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–≤–æ–π —Å–ª–æ–≤–∞—Ä—å!\n"
                    f"üíØ –¢–≤–æ–π —Å—á—ë—Ç: {user.get('score', 0) + 10} –±–∞–ª–ª–æ–≤."
                )

                if context.user_data["current_word_index"] % 3 == 0:
                    await start_spelling_check(update, context)
                else:
                    await send_word(update, context)

            else:
                await conn.execute(
                    "UPDATE users SET score = COALESCE(score, 0) - 5 WHERE user_id = $1",
                    user_id
                )
                hint = f"–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ ‚Äî '{correct_translation[0]}'."
                await update.message.reply_text(
                    f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. {hint}\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:"
                )

    except (ValueError, IndexError):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ check_word_translation: {e}")
        await update.message.reply_text("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    return True


async def start_spelling_check(update: Update, context: CallbackContext): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ 3-4 —Å–ª–æ–≤–∞ –∏–∑—É—á–µ–Ω–Ω–æ–≥–æ –ø–æ–¥—Ä—è–¥
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3-4 –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞
    user_id = update.message.from_user.id
    
    async with db.pool.acquire() as conn:
        words = await conn.fetch(
            """
            SELECT wt.* 
            FROM words_table wt
            JOIN users u ON wt.id::TEXT = ANY(u.learned_words)
            WHERE u.user_id = $1
            ORDER BY random()
            LIMIT $2
            """,
            user_id, INTERACTIVE_CHECK_INTERVAL
        )

    if not words:
        return

    check_word = random.choice(words)

    context.user_data["spelling_check"] = {
        "word": check_word['word'],
        "translation": check_word['translation'],
        "image": check_word.get('image', '')
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
    if check_word.get('image'):
        await update.message.reply_photo(
            photo=check_word['image'],
            caption="üìù –ù–∞–ø–∏—à–∏ —ç—Ç–æ —Å–ª–æ–≤–æ –Ω–∞ –∫–æ—Ä–µ–π—Å–∫–æ–º:",
            parse_mode="HTML"
        )
    else:
        await update.message.reply_text(
            f"üìù –°–ª–æ–≤–æ: {check_word['translation']}\n"
            "–ù–∞–ø–∏—à–∏ –µ–≥–æ –Ω–∞ –∫–æ—Ä–µ–π—Å–∫–æ–º:",
            parse_mode="HTML"
        )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    context.user_data["awaiting_spelling"] = True
    context.user_data["mode"] = "spelling_check" 

# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è


async def get_learned_words(user_id: int, level: int = None):
    async with db.pool.acquire() as conn:
        query = """
            SELECT wt.* 
            FROM words_table wt
            JOIN users u ON wt.id::TEXT = ANY(u.learned_words)
            WHERE u.user_id = $1
        """
        params = [user_id]
        
        if level:
            query += " AND wt.level = $2"
            params.append(level)
            
        return await conn.fetch(query, *params)

async def clear_learned_words(user_id: int):
    async with db.pool.acquire() as conn:
        await conn.execute(
            "UPDATE users SET learned_words = '{}' WHERE user_id = $1",
            user_id
        )


async def handle_learn_from_dictionary(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∏–ª)
    learned_words = await get_learned_words_from_db(user_id)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏–∑ Google Sheets –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    sheet_words = context.user_data.get("current_words", [])

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±–∞ —Å–ø–∏—Å–∫–∞, –∏—Å–∫–ª—é—á–∞—è –¥—É–±–ª–∏–∫–∞—Ç—ã
    all_words = {word["word"]: word for word in (sheet_words + learned_words)}.values()
    all_words = list(all_words)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫

    if not all_words:
        await update.message.reply_text("‚ùå –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è –∏–≥—Ä—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å.")
        return

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    random.shuffle(all_words)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
    context.user_data.update({
        "game_words": all_words,
        "current_game_index": 0,
        "correct_answers": 0,
        "in_game": True
    })

    # –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
    await update.message.reply_text(
        "üéÆ –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É '–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫'!\n\n"
        "‚ùì –ö–∞–∫ –∏–≥—Ä–∞—Ç—å:\n"
        "1. –Ø –ø–æ–∫–∞–∂—É —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º\n"
        "2. –¢—ã –ø–∏—à–µ—à—å –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–æ—Ä–µ–π—Å–∫–æ–º\n"
        "3. –°—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n\n"
        "üèÜ –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –Ω–∞–±—Ä–∞—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥—Ä—è–¥!\n"
        "–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏ '–°—Ç–æ–ø üõë'",
        reply_markup=ReplyKeyboardMarkup([["–°—Ç–æ–ø üõë"]], resize_keyboard=True)
    )

    await send_next_game_word(update, context)
    context.user_data["mode"] = "game"



async def send_next_game_word(update: Update, context: CallbackContext):
    words = context.user_data.get("game_words", [])
    index = context.user_data.get("current_game_index", 0)

    if index >= len(words):
        await finish_game(update, context)
        return
    
    word = words[index]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ context
    context.user_data.update({
        "current_word": word,
        "current_correct": word["word"],
        "current_game_index": index + 1
    })
    
    await update.message.reply_text(
        f"–°–ª–æ–≤–æ: {word['translation']}\n"
        f"üìù –£—Ä–æ–≤–µ–Ω—å: {word.get('level', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        "‚úèÔ∏è –ù–∞–ø–∏—à–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–æ—Ä–µ–π—Å–∫–æ–º:",
        parse_mode="HTML"
    )


async def check_game_translation(update: Update, context: CallbackContext):
    if context.user_data.get("mode") != "game":
        return False  

    user_input = update.message.text.strip() if update.message.text else ""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É "–°—Ç–æ–ø"
    if user_input == "–°—Ç–æ–ø üõë":
        context.user_data["mode"] = None  
        await finish_game(update, context)
        return True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ
    current_word = context.user_data.get("current_word")
    if not current_word:
        await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞! –ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞.")
        return True
    
    correct = current_word["word"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–æ–¥ - –Ω–µ —á–∏—Å–ª–æ
    if user_input.isdigit():
        await update.message.reply_text("‚úèÔ∏è –ù–∞–ø–∏—à–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–æ—Ä–µ–π—Å–∫–æ–º: ")
        return True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ (–±–µ–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏)
    if user_input == correct:
        context.user_data["correct_answers"] += 1
        example_list = current_word.get("examples") or ["(–ù–µ—Ç –ø—Ä–∏–º–µ—Ä–∞)"]
        example = random.choice(example_list)
        msg = (
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –¢–≤–æ–π —Å—á–µ—Ç: {context.user_data['correct_answers']}\n"
            f"üá∞üá∑ –û—Ç–≤–µ—Ç: {correct}\n"
            f"üí° –ü—Ä–∏–º–µ—Ä: {example}"
        )
    else:
        romanization = current_word.get("romanization", "–ù–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏") or "–ù–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"
        msg = (
            f"‚ùå –û—à–∏–±–∫–∞. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}\n"
            f"üìå –ó–∞–ø–æ–º–Ω–∏: {correct} ({romanization})"
        )
    
    await update.message.reply_text(msg)
    await asyncio.sleep(1.5)  
    await send_next_game_word(update, context)
    return True


async def finish_game(update: Update, context: CallbackContext):
    correct = context.user_data.get("correct_answers", 0)
    total = len(context.user_data.get("game_words", []))
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if correct == total:
        emoji = "üèÜ"
        comment = "–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –ø–æ–ª–∏–≥–ª–æ—Ç!"
    elif correct >= total * 0.8:
        emoji = "üéâ"
        comment = "–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü–æ—á—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ!"
    else:
        emoji = "üí™"
        comment = "–•–æ—Ä–æ—à–∞—è –ø–æ–ø—ã—Ç–∫–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è!"
    
    await update.message.reply_text(
        f"{emoji} –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {correct} –∏–∑ {total}\n"
        f"{comment}\n\n"
        "–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(
            [["–ò–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑ üîÑ", "–í—ã–π—Ç–∏"]], 
            resize_keyboard=True
        )
    )

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    context.user_data.pop("mode", None)
    for key in ["game_words", "current_game_index", "correct_answers", "in_game"]:
        context.user_data.pop(key, None)


async def handle_choice(update: Update, context: CallbackContext):
    user_choice = update.message.text
    user_id = update.message.from_user.id

    if user_choice == "–•–∞–Ω–≥—ã–ª—å":
        keyboard = [
            ["–ò–∑—É—á–∞—Ç—å –±—É–∫–≤—ã", "–ß—Ç–æ –∑–∞ –±—É–∫–≤–∞?"],
            ["–í—ã–π—Ç–∏"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å
        user = await db.get_user(user_id)
        if not user:
            await db.create_user(user_id)
            user = await db.get_user(user_id)

        await update.message.reply_text( 
            """
    üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª "–•–∞–Ω–≥—ã–ª—å"!</b> üéì
–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –∏–∑—É—á–∏—Ç—å –∫–æ—Ä–µ–π—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç –æ—Ç –ê –¥–æ –Ø (–∏–ª–∏, —Ç–æ—á–Ω–µ–µ, –æ—Ç „Ñ± –¥–æ „Öé)! üéâ

<b> –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç—ã –º–æ–∂–µ—à—å:</b>

1Ô∏è‚É£ <b>–ò–∑—É—á–∞—Ç—å –±—É–∫–≤—ã</b> ‚Äî –ø—Ä–æ–π—Ç–∏ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –æ—Ç –ø–µ—Ä–≤–æ–π –±—É–∫–≤—ã –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π. –ú—ã –ø–æ–∫–∞–∂–µ–º —Ç–µ–±–µ, –∫–∞–∫ –ø–∏—à–µ—Ç—Å—è –∏ –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç—Å—è –∫–∞–∂–¥–∞—è –±—É–∫–≤–∞, –¥–∞–¥–∏–º –ø—Ä–∏–º–µ—Ä—ã —Å–ª–æ–≤ –∏ –æ–±—ä—è—Å–Ω–∏–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏.
2Ô∏è‚É£ <b>–£–∑–Ω–∞—Ç—å, —á—Ç–æ –∑–∞ –±—É–∫–≤–∞</b> ‚Äî –≤–≤–µ–¥–∏ –ª—é–±—É—é –±—É–∫–≤—É, –∏ –º—ã —Ä–∞—Å—Å–∫–∞–∂–µ–º –æ –Ω–µ–π –≤—Å—ë: –∫–∞–∫ –æ–Ω–∞ –∑–≤—É—á–∏—Ç, –∫–∞–∫ –ø–∏—à–µ—Ç—Å—è –∏ –≤ –∫–∞–∫–∏—Ö —Å–ª–æ–≤–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.
    """,
            reply_markup=reply_markup, 
             parse_mode="HTML"
        )

    elif user_choice == "–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã":
        await update.message.reply_text("–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã ‚Äî —ç—Ç–æ –∫—Ä—É—Ç–æ! –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤: üëá     –ü–æ–∫–∞ —Ç—É—Ç –Ω–∏—á–µ–≥–æ –Ω–µ—Ç ")
        # –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã—Ö —Ñ—Ä–∞–∑
    elif user_choice == "–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞":
        await update.message.reply_text("–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ ‚Äî —ç—Ç–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç! üìò   –ü–æ–∫–∞ —Ç—É—Ç –Ω–∏—á–µ–≥–æ –Ω–µ—Ç ")
        # –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ–º
    elif user_choice == "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¢–û–ü–ò–ö—É":
        await update.message.reply_text("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¢–û–ü–ò–ö—É! –£–¥–∞—á–∏ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∫–æ—Ä–µ–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞! üìöüí™  –ü–æ–∫–∞ —Ç—É—Ç –Ω–∏—á–µ–≥–æ –Ω–µ—Ç")
        # –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –¢–û–ü–ò–ö—É



async def clear_user_state(context: CallbackContext):
    keys_to_remove = [
        "current_words", "current_word_index", "correct_translation",
        "current_options", "awaiting_retry", "awaiting_letter_input",
        "awaiting_dictionary_level"
    ]
    for key in keys_to_remove:
        if key in context.user_data:
            del context.user_data[key]

async def get_letters_data():
    try:
        return await db.pool.fetch("SELECT * FROM korean_alphabet ORDER BY id")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î: {e}")
        await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        return None



# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è —Å—á—ë—Ç–∞
async def reset_score(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_progress:
        user_progress[user_id]["score"] = 0  # –û–±–Ω—É–ª—è–µ–º —Å—á—ë—Ç
        await update.message.reply_text("–í–∞—à —Å—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω—É–ª—ë–Ω! üéâ")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—á—ë—Ç–∞ –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è. üò¢")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await db.connect()

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await app.initialize()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        await app.start()       # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        await app.updater.start_polling()  # –ó–∞–ø—É—Å–∫ polling

        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        await asyncio.Event().wait()

    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
        if 'app' in locals():
            await app.updater.stop()  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling
            await app.stop()          # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            await app.shutdown()     # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        await db.close()  # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")