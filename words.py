import re
import pandas as pd
import psycopg2
from googletrans import Translator  # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
import time
from tqdm import tqdm  # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä

# üîπ –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
DB_CONFIG = {
    "dbname": "korean_bot",
    "user": "bot_user",
    "password": "ofmine",
    "host": "localhost"
}

# üîπ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
def connect_to_db(config):
    try:
        conn = psycopg2.connect(**config)
        return conn
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

# üîπ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL (–µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
def create_table():
    conn = connect_to_db(DB_CONFIG)
    if conn:
        cursor = conn.cursor()
        
        # SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        create_table_query = """
        CREATE TABLE IF NOT EXISTS words_table (
            id SERIAL PRIMARY KEY,
            word VARCHAR(255) NOT NULL,
            translation TEXT NOT NULL,
            level INTEGER NOT NULL,
            UNIQUE (word)
        );
        """
        
        try:
            cursor.execute(create_table_query)
            conn.commit()
            print("–¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        finally:
            cursor.close()
            conn.close()

# üîπ –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ (Excel)
file_path = 'all_words.xlsx'  # –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É Excel —Ñ–∞–π–ª—É
df = pd.read_excel(file_path)

# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
translator = Translator()

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ —É—Ä–æ–≤–Ω—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1Í∏â" => 1)
def extract_level(level_str):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–∏—Ñ—Ä—ã –ø–µ—Ä–µ–¥ –∫–æ—Ä–µ–π—Å–∫–∏–º —Å–∏–º–≤–æ–ª–æ–º "Í∏â"
    match = re.match(r"(\d+)", level_str)
    if match:
        return int(match.group(1))  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
    return None  # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def process_data(row):
    word = row['Ïñ¥Ìúò']
    level_str = row['Îì±Í∏â']
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    level = extract_level(level_str)
    
    if level is None:
        print(f"–û—à–∏–±–∫–∞ —É—Ä–æ–≤–Ω—è –¥–ª—è —Å–ª–æ–≤–∞: {word}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ —Å–ª–æ–≤–æ.")
        return None
    
    try:
        # –ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        translation_result = translator.translate(word, src='ko', dest='ru')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∞
        if translation_result and translation_result.text:
            translation = translation_result.text
        else:
            translation = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏"
            print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è —Å–ª–æ–≤–∞: {word}")
    except Exception as e:
        translation = "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ {word}: {e}")
    
    return (word, translation, level)

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL
def upload_to_postgresql(batch_data):
    conn = connect_to_db(DB_CONFIG)
    if conn:
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É
        insert_query = """
        INSERT INTO words_table (word, translation, level)
        VALUES (%s, %s, %s)
        ON CONFLICT (word) DO UPDATE
        SET level = EXCLUDED.level, translation = EXCLUDED.translation;
        """
        
        # –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –∏ –≤—Å—Ç–∞–≤–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        for word, translation, level in batch_data:
            cursor.execute(insert_query, (word, translation, level))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        conn.commit()
        cursor.close()
        conn.close()

# üîπ –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
batch_size = 10  # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –ø–∞—á–∫–∏ –ø–æ 10 —Å–ª–æ–≤
batch_data = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±–∞–∑—É

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
create_table()

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º tqdm –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
for index, row in tqdm(df.iterrows(), total=df.shape[0], desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"):
    result = process_data(row)
    
    if result:
        batch_data.append(result)
    
    # –ï—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å 10 —Å–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if len(batch_data) == batch_size:
        upload_to_postgresql(batch_data)
        batch_data.clear()  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—á–∫–∏
        time.sleep(1)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API

# –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
if batch_data:
    upload_to_postgresql(batch_data)
