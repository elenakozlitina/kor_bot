import asyncpg
import gspread
import pandas as pd
import psycopg2
from google.oauth2.service_account import Credentials

# üîπ –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
DB_CONFIG = {
    "dbname": "korean_bot",
    "user": "bot_user",
    "password": "ofmine",
    "host": "localhost"
}

# üîπ –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets
GOOGLE_SHEETS_CREDENTIALS = "credentials.json"  # –ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É —Å API-–∫–ª—é—á–∞–º–∏–µ
SPREADSHEET_NAME = "–ö–æ—Ä–µ–π—Å–∫–∏–π –ê–ª—Ñ–∞–≤–∏—Ç"  # –ò–º—è —Ç–∞–±–ª–∏—Ü—ã –≤ Google Sheets
SHEET_NAME = "–ö–æ—Ä–µ–π—Å–∫–∏–π –ê–ª—Ñ–∞–≤–∏—Ç"  # –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ


TABLE_NAME = "alphabet_table"  # –ò–º—è —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å)


# üîπ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets
def authorize_google_sheets(credentials_path):
    scope = [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive.file",
        "https://www.googleapis.com/auth/drive",
    ]
    creds = Credentials.from_service_account_file(credentials_path, scopes=scope)
    return gspread.authorize(creds)


# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
def get_google_sheets_data(client, spreadsheet_name, sheet_name):
    spreadsheet = client.open(spreadsheet_name)
    sheet = spreadsheet.worksheet(sheet_name)
    data = sheet.get_all_records()
    return pd.DataFrame(data)


# üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def connect_db():
    return psycopg2.connect(**DB_CONFIG)


# üîπ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö)
def create_table(df, table_name):
    with connect_db() as conn:
        with conn.cursor() as cur:
            columns = []
            for col in df.columns:
                columns.append(f'"{col}" TEXT')  # –í—Å–µ –ø–æ–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã–µ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
            
            columns_sql = ", ".join(columns)
            query = f"""
            CREATE TABLE IF NOT EXISTS "{table_name}" (
                id SERIAL PRIMARY KEY,
                {columns_sql}
            );
            """
            cur.execute(query)
            conn.commit()


# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π (–ø–æ –ø–µ—Ä–≤–æ–º—É —Å—Ç–æ–ª–±—Ü—É –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∫–ª—é—á—É)
def get_existing_entries(table_name, key_column):
    query = f'SELECT "{key_column}" FROM "{table_name}";'
    with connect_db() as conn:
        with conn.cursor() as cur:
            cur.execute(query)
            return {row[0] for row in cur.fetchall()}



# üîπ –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É
def insert_new_data(df, table_name):
    key_column = df.columns[0]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
    existing_entries = get_existing_entries(table_name, key_column)
    new_data = df[~df[key_column].isin(existing_entries)]  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏

    if new_data.empty:
        print("‚úÖ –ù–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤—Å—ë —É–∂–µ –≤ –±–∞–∑–µ.")
        return

    placeholders = ", ".join(["%s"] * len(new_data.columns))
    query = f'INSERT INTO "{table_name}" ({", ".join([f'"{col}"' for col in new_data.columns])}) VALUES ({placeholders})'

    with connect_db() as conn:
        with conn.cursor() as cur:
            for _, row in new_data.iterrows():
                cur.execute(query, tuple(row))
            conn.commit()

    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_data)} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π!")



# üîπ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    client = authorize_google_sheets(GOOGLE_SHEETS_CREDENTIALS)
    df = get_google_sheets_data(client, SPREADSHEET_NAME, SHEET_NAME)

    if df.empty:
        print("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: Google Sheets –ø—É—Å—Ç!")
        return

    create_table(df, TABLE_NAME)  # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    insert_new_data(df, TABLE_NAME)  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ


# üîπ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if __name__ == "__main__":
    main()
